metadata = [{'call_id': 'fill_block', 'call_name': 'fill_block', 'call_args': [{'name': '_ratio', 'type': 'Perbill'}], 'lookup': '0x0000', 'documentation': ' A dispatch that will fill the block weight up to the given ratio.', 'module_id': 'System', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 202}, {'call_id': 'remark', 'call_name': 'remark', 'call_args': [{'name': '_remark', 'type': 'Bytes'}], 'lookup': '0x0001', 'documentation': ' Make some on-chain remark.\n\n # <weight>\n - `O(1)`\n - Base Weight: 0.665 µs, independent of remark length.\n - No DB operations.\n # </weight>', 'module_id': 'System', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 202}, {'call_id': 'set_heap_pages', 'call_name': 'set_heap_pages', 'call_args': [{'name': 'pages', 'type': 'u64'}], 'lookup': '0x0002', 'documentation': " Set the number of pages in the WebAssembly environment's heap.\n\n # <weight>\n - `O(1)`\n - 1 storage write.\n - Base Weight: 1.405 µs\n - 1 write to HEAP_PAGES\n # </weight>", 'module_id': 'System', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 202}, {'call_id': 'set_code', 'call_name': 'set_code', 'call_args': [{'name': 'code', 'type': 'Bytes'}], 'lookup': '0x0003', 'documentation': ' Set the new runtime code.\n\n # <weight>\n - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`\n - 1 storage write (codec `O(C)`).\n - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is expensive).\n - 1 event.\n The weight of this function is dependent on the runtime, but generally this is very expensive.\n We will treat this as a full block.\n # </weight>', 'module_id': 'System', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 202}, {'call_id': 'set_code_without_checks', 'call_name': 'set_code_without_checks', 'call_args': [{'name': 'code', 'type': 'Bytes'}], 'lookup': '0x0004', 'documentation': ' Set the new runtime code without doing any checks of the given `code`.\n\n # <weight>\n - `O(C)` where `C` length of `code`\n - 1 storage write (codec `O(C)`).\n - 1 event.\n The weight of this function is dependent on the runtime. We will treat this as a full block.\n # </weight>', 'module_id': 'System', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 202}, {'call_id': 'set_changes_trie_config', 'call_name': 'set_changes_trie_config', 'call_args': [{'name': 'changes_trie_config', 'type': 'Option<ChangesTrieConfiguration>'}], 'lookup': '0x0005', 'documentation': ' Set the new changes trie configuration.\n\n # <weight>\n - `O(1)`\n - 1 storage write or delete (codec `O(1)`).\n - 1 call to `deposit_log`: Uses `append` API, so O(1)\n - Base Weight: 7.218 µs\n - DB Weight:\n     - Writes: Changes Trie, System Digest\n # </weight>', 'module_id': 'System', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 202}, {'call_id': 'set_storage', 'call_name': 'set_storage', 'call_args': [{'name': 'items', 'type': 'Vec<KeyValue>'}], 'lookup': '0x0006', 'documentation': ' Set some items of storage.\n\n # <weight>\n - `O(I)` where `I` length of `items`\n - `I` storage writes (`O(1)`).\n - Base Weight: 0.568 * i µs\n - Writes: Number of items\n # </weight>', 'module_id': 'System', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 202}, {'call_id': 'kill_storage', 'call_name': 'kill_storage', 'call_args': [{'name': 'keys', 'type': 'Vec<Key>'}], 'lookup': '0x0007', 'documentation': ' Kill some items from storage.\n\n # <weight>\n - `O(IK)` where `I` length of `keys` and `K` length of one key\n - `I` storage deletions.\n - Base Weight: .378 * i µs\n - Writes: Number of items\n # </weight>', 'module_id': 'System', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 202}, {'call_id': 'kill_prefix', 'call_name': 'kill_prefix', 'call_args': [{'name': 'prefix', 'type': 'Key'}, {'name': '_subkeys', 'type': 'u32'}], 'lookup': '0x0008', 'documentation': ' Kill all storage items with a key that starts with the given prefix.\n\n **NOTE:** We rely on the Root origin to provide us the number of subkeys under\n the prefix we are removing to accurately calculate the weight of this function.\n\n # <weight>\n - `O(P)` where `P` amount of keys with prefix `prefix`\n - `P` storage deletions.\n - Base Weight: 0.834 * P µs\n - Writes: Number of subkeys + 1\n # </weight>', 'module_id': 'System', 'module_prefix': 'System', 'module_name': 'System', 'spec_version': 202}, {'call_id': 'report_equivocation', 'call_name': 'report_equivocation', 'call_args': [{'name': 'equivocation_proof', 'type': 'EquivocationProof<Header>'}, {'name': 'key_owner_proof', 'type': 'KeyOwnerProof'}], 'lookup': '0x0100', 'documentation': ' Report authority equivocation/misbehavior. This method will verify\n the equivocation proof and validate the given key ownership proof\n against the extracted offender. If both are valid, the offence will\n be reported.', 'module_id': 'Babe', 'module_prefix': 'Babe', 'module_name': 'Babe', 'spec_version': 202}, {'call_id': 'report_equivocation_unsigned', 'call_name': 'report_equivocation_unsigned', 'call_args': [{'name': 'equivocation_proof', 'type': 'EquivocationProof<Header>'}, {'name': 'key_owner_proof', 'type': 'KeyOwnerProof'}], 'lookup': '0x0101', 'documentation': ' Report authority equivocation/misbehavior. This method will verify\n the equivocation proof and validate the given key ownership proof\n against the extracted offender. If both are valid, the offence will\n be reported.\n This extrinsic must be called unsigned and it is expected that only\n block authors will call it (validated in `ValidateUnsigned`), as such\n if the block author is defined it will be defined as the equivocation\n reporter.', 'module_id': 'Babe', 'module_prefix': 'Babe', 'module_name': 'Babe', 'spec_version': 202}, {'call_id': 'set', 'call_name': 'set', 'call_args': [{'name': 'now', 'type': 'Compact<Moment>'}], 'lookup': '0x0200', 'documentation': " Set the current time.\n\n This call should be invoked exactly once per block. It will panic at the finalization\n phase, if this call hasn't been invoked by that time.\n\n The timestamp should be greater than the previous one by the amount specified by\n `MinimumPeriod`.\n\n The dispatch origin for this call must be `Inherent`.\n\n # <weight>\n - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)\n - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in `on_finalize`)\n - 1 event handler `on_timestamp_set`. Must be `O(1)`.\n # </weight>", 'module_id': 'Timestamp', 'module_prefix': 'Timestamp', 'module_name': 'Timestamp', 'spec_version': 202}, {'call_id': 'claim', 'call_name': 'claim', 'call_args': [{'name': 'index', 'type': 'AccountIndex'}], 'lookup': '0x0300', 'documentation': ' Assign an previously unassigned index.\n\n Payment: `Deposit` is reserved from the sender account.\n\n The dispatch origin for this call must be _Signed_.\n\n - `index`: the index to be claimed. This must not be in use.\n\n Emits `IndexAssigned` if successful.\n\n # <weight>\n - `O(1)`.\n - One storage mutation (codec `O(1)`).\n - One reserve operation.\n - One event.\n -------------------\n - DB Weight: 1 Read/Write (Accounts)\n # </weight>', 'module_id': 'Indices', 'module_prefix': 'Indices', 'module_name': 'Indices', 'spec_version': 202}, {'call_id': 'transfer', 'call_name': 'transfer', 'call_args': [{'name': 'new', 'type': 'AccountId'}, {'name': 'index', 'type': 'AccountIndex'}], 'lookup': '0x0301', 'documentation': ' Assign an index already owned by the sender to another account. The balance reservation\n is effectively transferred to the new account.\n\n The dispatch origin for this call must be _Signed_.\n\n - `index`: the index to be re-assigned. This must be owned by the sender.\n - `new`: the new owner of the index. This function is a no-op if it is equal to sender.\n\n Emits `IndexAssigned` if successful.\n\n # <weight>\n - `O(1)`.\n - One storage mutation (codec `O(1)`).\n - One transfer operation.\n - One event.\n -------------------\n - DB Weight:\n    - Reads: Indices Accounts, System Account (recipient)\n    - Writes: Indices Accounts, System Account (recipient)\n # </weight>', 'module_id': 'Indices', 'module_prefix': 'Indices', 'module_name': 'Indices', 'spec_version': 202}, {'call_id': 'free', 'call_name': 'free', 'call_args': [{'name': 'index', 'type': 'AccountIndex'}], 'lookup': '0x0302', 'documentation': ' Free up an index owned by the sender.\n\n Payment: Any previous deposit placed for the index is unreserved in the sender account.\n\n The dispatch origin for this call must be _Signed_ and the sender must own the index.\n\n - `index`: the index to be freed. This must be owned by the sender.\n\n Emits `IndexFreed` if successful.\n\n # <weight>\n - `O(1)`.\n - One storage mutation (codec `O(1)`).\n - One reserve operation.\n - One event.\n -------------------\n - DB Weight: 1 Read/Write (Accounts)\n # </weight>', 'module_id': 'Indices', 'module_prefix': 'Indices', 'module_name': 'Indices', 'spec_version': 202}, {'call_id': 'force_transfer', 'call_name': 'force_transfer', 'call_args': [{'name': 'new', 'type': 'AccountId'}, {'name': 'index', 'type': 'AccountIndex'}, {'name': 'freeze', 'type': 'bool'}], 'lookup': '0x0303', 'documentation': " Force an index to an account. This doesn't require a deposit. If the index is already\n held, then any deposit is reimbursed to its current owner.\n\n The dispatch origin for this call must be _Root_.\n\n - `index`: the index to be (re-)assigned.\n - `new`: the new owner of the index. This function is a no-op if it is equal to sender.\n - `freeze`: if set to `true`, will freeze the index so it cannot be transferred.\n\n Emits `IndexAssigned` if successful.\n\n # <weight>\n - `O(1)`.\n - One storage mutation (codec `O(1)`).\n - Up to one reserve operation.\n - One event.\n -------------------\n - DB Weight:\n    - Reads: Indices Accounts, System Account (original owner)\n    - Writes: Indices Accounts, System Account (original owner)\n # </weight>", 'module_id': 'Indices', 'module_prefix': 'Indices', 'module_name': 'Indices', 'spec_version': 202}, {'call_id': 'freeze', 'call_name': 'freeze', 'call_args': [{'name': 'index', 'type': 'AccountIndex'}], 'lookup': '0x0304', 'documentation': ' Freeze an index so it will always point to the sender account. This consumes the deposit.\n\n The dispatch origin for this call must be _Signed_ and the signing account must have a\n non-frozen account `index`.\n\n - `index`: the index to be frozen in place.\n\n Emits `IndexFrozen` if successful.\n\n # <weight>\n - `O(1)`.\n - One storage mutation (codec `O(1)`).\n - Up to one slash operation.\n - One event.\n -------------------\n - DB Weight: 1 Read/Write (Accounts)\n # </weight>', 'module_id': 'Indices', 'module_prefix': 'Indices', 'module_name': 'Indices', 'spec_version': 202}, {'call_id': 'transfer', 'call_name': 'transfer', 'call_args': [{'name': 'dest', 'type': 'LookupSource'}, {'name': 'value', 'type': 'Compact<Balance>'}], 'lookup': '0x0400', 'documentation': " Transfer some liquid free balance to another account.\n\n `transfer` will set the `FreeBalance` of the sender and receiver.\n It will decrease the total issuance of the system by the `TransferFee`.\n If the sender's account is below the existential deposit as a result\n of the transfer, the account will be reaped.\n\n The dispatch origin for this call must be `Signed` by the transactor.\n\n # <weight>\n - Dependent on arguments but not critical, given proper implementations for\n   input config types. See related functions below.\n - It contains a limited number of reads and writes internally and no complex computation.\n\n Related functions:\n\n   - `ensure_can_withdraw` is always called internally but has a bounded complexity.\n   - Transferring balances to accounts that did not exist before will cause\n      `T::OnNewAccount::on_new_account` to be called.\n   - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.\n   - `transfer_keep_alive` works the same way as `transfer`, but has an additional\n     check that the transfer will not kill the origin account.\n ---------------------------------\n - Base Weight: 73.64 µs, worst case scenario (account created, account removed)\n - DB Weight: 1 Read and 1 Write to destination account\n - Origin account is already in memory, so no DB operations for them.\n # </weight>", 'module_id': 'Balances', 'module_prefix': 'Balances', 'module_name': 'Balances', 'spec_version': 202}, {'call_id': 'set_balance', 'call_name': 'set_balance', 'call_args': [{'name': 'who', 'type': 'LookupSource'}, {'name': 'new_free', 'type': 'Compact<Balance>'}, {'name': 'new_reserved', 'type': 'Compact<Balance>'}], 'lookup': '0x0401', 'documentation': ' Set the balances of a given account.\n\n This will alter `FreeBalance` and `ReservedBalance` in storage. it will\n also decrease the total issuance of the system (`TotalIssuance`).\n If the new free or reserved balance is below the existential deposit,\n it will reset the account nonce (`frame_system::AccountNonce`).\n\n The dispatch origin for this call is `root`.\n\n # <weight>\n - Independent of the arguments.\n - Contains a limited number of reads and writes.\n ---------------------\n - Base Weight:\n     - Creating: 27.56 µs\n     - Killing: 35.11 µs\n - DB Weight: 1 Read, 1 Write to `who`\n # </weight>', 'module_id': 'Balances', 'module_prefix': 'Balances', 'module_name': 'Balances', 'spec_version': 202}, {'call_id': 'force_transfer', 'call_name': 'force_transfer', 'call_args': [{'name': 'source', 'type': 'LookupSource'}, {'name': 'dest', 'type': 'LookupSource'}, {'name': 'value', 'type': 'Compact<Balance>'}], 'lookup': '0x0402', 'documentation': ' Exactly as `transfer`, except the origin must be root and the source account may be\n specified.\n # <weight>\n - Same as transfer, but additional read and write because the source account is\n   not assumed to be in the overlay.\n # </weight>', 'module_id': 'Balances', 'module_prefix': 'Balances', 'module_name': 'Balances', 'spec_version': 202}, {'call_id': 'transfer_keep_alive', 'call_name': 'transfer_keep_alive', 'call_args': [{'name': 'dest', 'type': 'LookupSource'}, {'name': 'value', 'type': 'Compact<Balance>'}], 'lookup': '0x0403', 'documentation': ' Same as the [`transfer`] call, but with a check that the transfer will not kill the\n origin account.\n\n 99% of the time you want [`transfer`] instead.\n\n [`transfer`]: struct.Module.html#method.transfer\n # <weight>\n - Cheaper than transfer because account cannot be killed.\n - Base Weight: 51.4 µs\n - DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)\n #</weight>', 'module_id': 'Balances', 'module_prefix': 'Balances', 'module_name': 'Balances', 'spec_version': 202}, {'call_id': 'set_uncles', 'call_name': 'set_uncles', 'call_args': [{'name': 'new_uncles', 'type': 'Vec<Header>'}], 'lookup': '0x0600', 'documentation': ' Provide a set of uncles.', 'module_id': 'Authorship', 'module_prefix': 'Authorship', 'module_name': 'Authorship', 'spec_version': 202}, {'call_id': 'set_keys', 'call_name': 'set_keys', 'call_args': [{'name': 'keys', 'type': 'Keys'}, {'name': 'proof', 'type': 'Bytes'}], 'lookup': '0x0900', 'documentation': " Sets the session key(s) of the function caller to `keys`.\n Allows an account to set its session key prior to becoming a validator.\n This doesn't take effect until the next session.\n\n The dispatch origin of this function must be signed.\n\n # <weight>\n - Complexity: `O(1)`\n   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.\n - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`\n - DbWrites: `origin account`, `NextKeys`\n - DbReads per key id: `KeyOwner`\n - DbWrites per key id: `KeyOwner`\n # </weight>", 'module_id': 'Session', 'module_prefix': 'Session', 'module_name': 'Session', 'spec_version': 202}, {'call_id': 'purge_keys', 'call_name': 'purge_keys', 'call_args': [], 'lookup': '0x0901', 'documentation': " Removes any session key(s) of the function caller.\n This doesn't take effect until the next session.\n\n The dispatch origin of this function must be signed.\n\n # <weight>\n - Complexity: `O(1)` in number of key types.\n   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.\n - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`\n - DbWrites: `NextKeys`, `origin account`\n - DbWrites per key id: `KeyOwnder`\n # </weight>", 'module_id': 'Session', 'module_prefix': 'Session', 'module_name': 'Session', 'spec_version': 202}, {'call_id': 'report_equivocation', 'call_name': 'report_equivocation', 'call_args': [{'name': 'equivocation_proof', 'type': 'EquivocationProof<Hash, BlockNumber>'}, {'name': 'key_owner_proof', 'type': 'KeyOwnerProof'}], 'lookup': '0x0a00', 'documentation': ' Report voter equivocation/misbehavior. This method will verify the\n equivocation proof and validate the given key ownership proof\n against the extracted offender. If both are valid, the offence\n will be reported.', 'module_id': 'Grandpa', 'module_prefix': 'GrandpaFinality', 'module_name': 'Grandpa', 'spec_version': 202}, {'call_id': 'report_equivocation_unsigned', 'call_name': 'report_equivocation_unsigned', 'call_args': [{'name': 'equivocation_proof', 'type': 'EquivocationProof<Hash, BlockNumber>'}, {'name': 'key_owner_proof', 'type': 'KeyOwnerProof'}], 'lookup': '0x0a01', 'documentation': ' Report voter equivocation/misbehavior. This method will verify the\n equivocation proof and validate the given key ownership proof\n against the extracted offender. If both are valid, the offence\n will be reported.\n\n This extrinsic must be called unsigned and it is expected that only\n block authors will call it (validated in `ValidateUnsigned`), as such\n if the block author is defined it will be defined as the equivocation\n reporter.', 'module_id': 'Grandpa', 'module_prefix': 'GrandpaFinality', 'module_name': 'Grandpa', 'spec_version': 202}, {'call_id': 'note_stalled', 'call_name': 'note_stalled', 'call_args': [{'name': 'delay', 'type': 'BlockNumber'}, {'name': 'best_finalized_block_number', 'type': 'BlockNumber'}], 'lookup': '0x0a02', 'documentation': ' Note that the current authority set of the GRANDPA finality gadget has\n stalled. This will trigger a forced authority set change at the beginning\n of the next session, to be enacted `delay` blocks after that. The delay\n should be high enough to safely assume that the block signalling the\n forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters\n will start the new authority set using the given finalized block as base.\n Only callable by root.', 'module_id': 'Grandpa', 'module_prefix': 'GrandpaFinality', 'module_name': 'Grandpa', 'spec_version': 202}, {'call_id': 'heartbeat', 'call_name': 'heartbeat', 'call_args': [{'name': 'heartbeat', 'type': 'Heartbeat<BlockNumber>'}, {'name': '_signature', 'type': '<AuthorityId as RuntimeAppPublic>::Signature'}], 'lookup': '0x0b00', 'documentation': ' # <weight>\n - Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len)\n   and E is length of `heartbeat.network_state.external_address`\n   - `O(K)`: decoding of length `K`\n   - `O(E)`: decoding/encoding of length `E`\n - DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,\n   `ReceivedHeartbeats`\n - DbWrites: `ReceivedHeartbeats`\n # </weight>', 'module_id': 'ImOnline', 'module_prefix': 'ImOnline', 'module_name': 'ImOnline', 'spec_version': 202}, {'call_id': 'set_validation_upgrade_frequency', 'call_name': 'set_validation_upgrade_frequency', 'call_args': [{'name': 'new', 'type': 'BlockNumber'}], 'lookup': '0x0e00', 'documentation': ' Set the validation upgrade frequency.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_validation_upgrade_delay', 'call_name': 'set_validation_upgrade_delay', 'call_args': [{'name': 'new', 'type': 'BlockNumber'}], 'lookup': '0x0e01', 'documentation': ' Set the validation upgrade delay.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_acceptance_period', 'call_name': 'set_acceptance_period', 'call_args': [{'name': 'new', 'type': 'BlockNumber'}], 'lookup': '0x0e02', 'documentation': ' Set the acceptance period for an included candidate.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_max_code_size', 'call_name': 'set_max_code_size', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e03', 'documentation': ' Set the max validation code size for incoming upgrades.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_max_pov_size', 'call_name': 'set_max_pov_size', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e04', 'documentation': ' Set the max POV block size for incoming upgrades.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_max_head_data_size', 'call_name': 'set_max_head_data_size', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e05', 'documentation': ' Set the max head data size for paras.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_parathread_cores', 'call_name': 'set_parathread_cores', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e06', 'documentation': ' Set the number of parathread execution cores.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_parathread_retries', 'call_name': 'set_parathread_retries', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e07', 'documentation': ' Set the number of retries for a particular parathread.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_group_rotation_frequency', 'call_name': 'set_group_rotation_frequency', 'call_args': [{'name': 'new', 'type': 'BlockNumber'}], 'lookup': '0x0e08', 'documentation': ' Set the parachain validator-group rotation frequency', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_chain_availability_period', 'call_name': 'set_chain_availability_period', 'call_args': [{'name': 'new', 'type': 'BlockNumber'}], 'lookup': '0x0e09', 'documentation': ' Set the availability period for parachains.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_thread_availability_period', 'call_name': 'set_thread_availability_period', 'call_args': [{'name': 'new', 'type': 'BlockNumber'}], 'lookup': '0x0e0a', 'documentation': ' Set the availability period for parathreads.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_scheduling_lookahead', 'call_name': 'set_scheduling_lookahead', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e0b', 'documentation': ' Set the scheduling lookahead, in expected number of blocks at peak throughput.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_max_validators_per_core', 'call_name': 'set_max_validators_per_core', 'call_args': [{'name': 'new', 'type': 'Option<u32>'}], 'lookup': '0x0e0c', 'documentation': ' Set the maximum number of validators to assign to any core.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_dispute_period', 'call_name': 'set_dispute_period', 'call_args': [{'name': 'new', 'type': 'SessionIndex'}], 'lookup': '0x0e0d', 'documentation': ' Set the dispute period, in number of sessions to keep for disputes.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_no_show_slots', 'call_name': 'set_no_show_slots', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e0e', 'documentation': ' Set the no show slots, in number of number of consensus slots.\n Must be at least 1.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_n_delay_tranches', 'call_name': 'set_n_delay_tranches', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e0f', 'documentation': ' Set the total number of delay tranches.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_zeroth_delay_tranche_width', 'call_name': 'set_zeroth_delay_tranche_width', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e10', 'documentation': ' Set the zeroth delay tranche width.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_needed_approvals', 'call_name': 'set_needed_approvals', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e11', 'documentation': ' Set the number of validators needed to approve a block.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_relay_vrf_modulo_samples', 'call_name': 'set_relay_vrf_modulo_samples', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e12', 'documentation': ' Set the number of samples to do of the RelayVRFModulo approval assignment criterion.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_max_upward_queue_count', 'call_name': 'set_max_upward_queue_count', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e13', 'documentation': ' Sets the maximum items that can present in a upward dispatch queue at once.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_max_upward_queue_size', 'call_name': 'set_max_upward_queue_size', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e14', 'documentation': ' Sets the maximum total size of items that can present in a upward dispatch queue at once.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_max_downward_message_size', 'call_name': 'set_max_downward_message_size', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e15', 'documentation': ' Set the critical downward message size.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_preferred_dispatchable_upward_messages_step_weight', 'call_name': 'set_preferred_dispatchable_upward_messages_step_weight', 'call_args': [{'name': 'new', 'type': 'Weight'}], 'lookup': '0x0e16', 'documentation': ' Sets the soft limit for the phase of dispatching dispatchable upward messages.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_max_upward_message_size', 'call_name': 'set_max_upward_message_size', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e17', 'documentation': ' Sets the maximum size of an upward message that can be sent by a candidate.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_max_upward_message_num_per_candidate', 'call_name': 'set_max_upward_message_num_per_candidate', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e18', 'documentation': ' Sets the maximum number of messages that a candidate can contain.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_hrmp_open_request_ttl', 'call_name': 'set_hrmp_open_request_ttl', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e19', 'documentation': ' Sets the number of sessions after which an HRMP open channel request expires.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_hrmp_sender_deposit', 'call_name': 'set_hrmp_sender_deposit', 'call_args': [{'name': 'new', 'type': 'Balance'}], 'lookup': '0x0e1a', 'documentation': ' Sets the amount of funds that the sender should provide for opening an HRMP channel.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_hrmp_recipient_deposit', 'call_name': 'set_hrmp_recipient_deposit', 'call_args': [{'name': 'new', 'type': 'Balance'}], 'lookup': '0x0e1b', 'documentation': ' Sets the amount of funds that the recipient should provide for accepting opening an HRMP\n channel.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_hrmp_channel_max_capacity', 'call_name': 'set_hrmp_channel_max_capacity', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e1c', 'documentation': ' Sets the maximum number of messages allowed in an HRMP channel at once.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_hrmp_channel_max_total_size', 'call_name': 'set_hrmp_channel_max_total_size', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e1d', 'documentation': ' Sets the maximum total size of messages in bytes allowed in an HRMP channel at once.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_hrmp_max_parachain_inbound_channels', 'call_name': 'set_hrmp_max_parachain_inbound_channels', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e1e', 'documentation': ' Sets the maximum number of inbound HRMP channels a parachain is allowed to accept.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_hrmp_max_parathread_inbound_channels', 'call_name': 'set_hrmp_max_parathread_inbound_channels', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e1f', 'documentation': ' Sets the maximum number of inbound HRMP channels a parathread is allowed to accept.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_hrmp_channel_max_message_size', 'call_name': 'set_hrmp_channel_max_message_size', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e20', 'documentation': ' Sets the maximum size of a message that could ever be put into an HRMP channel.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_hrmp_max_parachain_outbound_channels', 'call_name': 'set_hrmp_max_parachain_outbound_channels', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e21', 'documentation': ' Sets the maximum number of outbound HRMP channels a parachain is allowed to open.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_hrmp_max_parathread_outbound_channels', 'call_name': 'set_hrmp_max_parathread_outbound_channels', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e22', 'documentation': ' Sets the maximum number of outbound HRMP channels a parathread is allowed to open.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'set_hrmp_max_message_num_per_candidate', 'call_name': 'set_hrmp_max_message_num_per_candidate', 'call_args': [{'name': 'new', 'type': 'u32'}], 'lookup': '0x0e23', 'documentation': ' Sets the maximum number of outbound HRMP messages can be sent by a candidate.', 'module_id': 'ParachainsConfiguration', 'module_prefix': 'Configuration', 'module_name': 'ParachainsConfiguration', 'spec_version': 202}, {'call_id': 'inclusion', 'call_name': 'inclusion', 'call_args': [{'name': 'signed_bitfields', 'type': 'SignedAvailabilityBitfields'}, {'name': 'backed_candidates', 'type': 'Vec<BackedCandidate<Hash>>'}, {'name': 'parent_header', 'type': 'Header'}], 'lookup': '0x1000', 'documentation': ' Include backed candidates and bitfields.', 'module_id': 'InclusionInherent', 'module_prefix': 'ParaInclusionInherent', 'module_name': 'InclusionInherent', 'spec_version': 202}, {'call_id': 'schedule', 'call_name': 'schedule', 'call_args': [{'name': 'when', 'type': 'BlockNumber'}, {'name': 'maybe_periodic', 'type': 'Option<schedule::Period<BlockNumber>>'}, {'name': 'priority', 'type': 'schedule::Priority'}, {'name': 'call', 'type': 'Box<Call>'}], 'lookup': '0x1100', 'documentation': ' Anonymously schedule a task.\n\n # <weight>\n - S = Number of already scheduled calls\n - Base Weight: 22.29 + .126 * S µs\n - DB Weight:\n     - Read: Agenda\n     - Write: Agenda\n - Will use base weight of 25 which should be good for up to 30 scheduled calls\n # </weight>', 'module_id': 'Scheduler', 'module_prefix': 'Scheduler', 'module_name': 'Scheduler', 'spec_version': 202}, {'call_id': 'cancel', 'call_name': 'cancel', 'call_args': [{'name': 'when', 'type': 'BlockNumber'}, {'name': 'index', 'type': 'u32'}], 'lookup': '0x1101', 'documentation': ' Cancel an anonymously scheduled task.\n\n # <weight>\n - S = Number of already scheduled calls\n - Base Weight: 22.15 + 2.869 * S µs\n - DB Weight:\n     - Read: Agenda\n     - Write: Agenda, Lookup\n - Will use base weight of 100 which should be good for up to 30 scheduled calls\n # </weight>', 'module_id': 'Scheduler', 'module_prefix': 'Scheduler', 'module_name': 'Scheduler', 'spec_version': 202}, {'call_id': 'schedule_named', 'call_name': 'schedule_named', 'call_args': [{'name': 'id', 'type': 'Bytes'}, {'name': 'when', 'type': 'BlockNumber'}, {'name': 'maybe_periodic', 'type': 'Option<schedule::Period<BlockNumber>>'}, {'name': 'priority', 'type': 'schedule::Priority'}, {'name': 'call', 'type': 'Box<Call>'}], 'lookup': '0x1102', 'documentation': ' Schedule a named task.\n\n # <weight>\n - S = Number of already scheduled calls\n - Base Weight: 29.6 + .159 * S µs\n - DB Weight:\n     - Read: Agenda, Lookup\n     - Write: Agenda, Lookup\n - Will use base weight of 35 which should be good for more than 30 scheduled calls\n # </weight>', 'module_id': 'Scheduler', 'module_prefix': 'Scheduler', 'module_name': 'Scheduler', 'spec_version': 202}, {'call_id': 'cancel_named', 'call_name': 'cancel_named', 'call_args': [{'name': 'id', 'type': 'Bytes'}], 'lookup': '0x1103', 'documentation': ' Cancel a named scheduled task.\n\n # <weight>\n - S = Number of already scheduled calls\n - Base Weight: 24.91 + 2.907 * S µs\n - DB Weight:\n     - Read: Agenda, Lookup\n     - Write: Agenda, Lookup\n - Will use base weight of 100 which should be good for up to 30 scheduled calls\n # </weight>', 'module_id': 'Scheduler', 'module_prefix': 'Scheduler', 'module_name': 'Scheduler', 'spec_version': 202}, {'call_id': 'schedule_after', 'call_name': 'schedule_after', 'call_args': [{'name': 'after', 'type': 'BlockNumber'}, {'name': 'maybe_periodic', 'type': 'Option<schedule::Period<BlockNumber>>'}, {'name': 'priority', 'type': 'schedule::Priority'}, {'name': 'call', 'type': 'Box<Call>'}], 'lookup': '0x1104', 'documentation': ' Anonymously schedule a task after a delay.\n\n # <weight>\n Same as [`schedule`].\n # </weight>', 'module_id': 'Scheduler', 'module_prefix': 'Scheduler', 'module_name': 'Scheduler', 'spec_version': 202}, {'call_id': 'schedule_named_after', 'call_name': 'schedule_named_after', 'call_args': [{'name': 'id', 'type': 'Bytes'}, {'name': 'after', 'type': 'BlockNumber'}, {'name': 'maybe_periodic', 'type': 'Option<schedule::Period<BlockNumber>>'}, {'name': 'priority', 'type': 'schedule::Priority'}, {'name': 'call', 'type': 'Box<Call>'}], 'lookup': '0x1105', 'documentation': ' Schedule a named task after a delay.\n\n # <weight>\n Same as [`schedule_named`].\n # </weight>', 'module_id': 'Scheduler', 'module_prefix': 'Scheduler', 'module_name': 'Scheduler', 'spec_version': 202}, {'call_id': 'hrmp_init_open_channel', 'call_name': 'hrmp_init_open_channel', 'call_args': [{'name': 'recipient', 'type': 'ParaId'}, {'name': 'proposed_max_capacity', 'type': 'u32'}, {'name': 'proposed_max_message_size', 'type': 'u32'}], 'lookup': '0x1600', 'documentation': ' Initiate opening a channel from a parachain to a given recipient with given channel\n parameters.\n\n - `proposed_max_capacity` - specifies how many messages can be in the channel at once.\n - `proposed_max_message_size` - specifies the maximum size of any of the messages.\n\n These numbers are a subject to the relay-chain configuration limits.\n\n The channel can be opened only after the recipient confirms it and only on a session\n change.', 'module_id': 'Hrmp', 'module_prefix': 'Hrmp', 'module_name': 'Hrmp', 'spec_version': 202}, {'call_id': 'hrmp_accept_open_channel', 'call_name': 'hrmp_accept_open_channel', 'call_args': [{'name': 'sender', 'type': 'ParaId'}], 'lookup': '0x1601', 'documentation': ' Accept a pending open channel request from the given sender.\n\n The channel will be opened only on the next session boundary.', 'module_id': 'Hrmp', 'module_prefix': 'Hrmp', 'module_name': 'Hrmp', 'spec_version': 202}, {'call_id': 'hrmp_close_channel', 'call_name': 'hrmp_close_channel', 'call_args': [{'name': 'channel_id', 'type': 'HrmpChannelId'}], 'lookup': '0x1602', 'documentation': ' Initiate unilateral closing of a channel. The origin must be either the sender or the\n recipient in the channel being closed.\n\n The closure can only happen on a session change.', 'module_id': 'Hrmp', 'module_prefix': 'Hrmp', 'module_name': 'Hrmp', 'spec_version': 202}, {'call_id': 'register_parathread', 'call_name': 'register_parathread', 'call_args': [{'name': 'id', 'type': 'ParaId'}, {'name': 'genesis_head', 'type': 'HeadData'}, {'name': 'validation_code', 'type': 'ValidationCode'}], 'lookup': '0x1800', 'documentation': " Register a parathread with given code for immediate use.\n\n Must be sent from a Signed origin that is able to have `ParathreadDeposit` reserved.\n `genesis_head` and `validation_code` are used to initalize the parathread's state.", 'module_id': 'Registrar', 'module_prefix': 'Registrar', 'module_name': 'Registrar', 'spec_version': 202}, {'call_id': 'deregister_parathread', 'call_name': 'deregister_parathread', 'call_args': [], 'lookup': '0x1801', 'documentation': " Deregister a parathread and retreive the deposit.\n\n Must be sent from a `Parachain` origin which is currently a parathread.\n\n Ensure that before calling this that any funds you want emptied from the parathread's\n account is moved out; after this it will be impossible to retreive them (without\n governance intervention).", 'module_id': 'Registrar', 'module_prefix': 'Registrar', 'module_name': 'Registrar', 'spec_version': 202}, {'call_id': 'enable_parathread_registration', 'call_name': 'enable_parathread_registration', 'call_args': [], 'lookup': '0x1802', 'documentation': '', 'module_id': 'Registrar', 'module_prefix': 'Registrar', 'module_name': 'Registrar', 'spec_version': 202}, {'call_id': 'disable_parathread_registration', 'call_name': 'disable_parathread_registration', 'call_args': [], 'lookup': '0x1803', 'documentation': '', 'module_id': 'Registrar', 'module_prefix': 'Registrar', 'module_name': 'Registrar', 'spec_version': 202}, {'call_id': 'swap', 'call_name': 'swap', 'call_args': [{'name': 'other', 'type': 'ParaId'}], 'lookup': '0x1804', 'documentation': ' Swap a parachain with another parachain or parathread. The origin must be a `Parachain`.\n The swap will happen only if there is already an opposite swap pending. If there is not,\n the swap will be stored in the pending swaps map, ready for a later confirmatory swap.\n\n The `ParaId`s remain mapped to the same head data and code so external code can rely on\n `ParaId` to be a long-term identifier of a notional "parachain". However, their\n scheduling info (i.e. whether they\'re a parathread or parachain), auction information\n and the auction deposit are switched.', 'module_id': 'Registrar', 'module_prefix': 'Registrar', 'module_name': 'Registrar', 'spec_version': 202}, {'call_id': 'sudo_schedule_para_initialize', 'call_name': 'sudo_schedule_para_initialize', 'call_args': [{'name': 'id', 'type': 'ParaId'}, {'name': 'genesis', 'type': 'ParaGenesisArgs'}], 'lookup': '0x1900', 'documentation': ' Schedule a para to be initialized at the start of the next session.', 'module_id': 'ParasSudoWrapper', 'module_prefix': None, 'module_name': 'ParasSudoWrapper', 'spec_version': 202}, {'call_id': 'sudo_schedule_para_cleanup', 'call_name': 'sudo_schedule_para_cleanup', 'call_args': [{'name': 'id', 'type': 'ParaId'}], 'lookup': '0x1901', 'documentation': ' Schedule a para to be cleaned up at the start of the next session.', 'module_id': 'ParasSudoWrapper', 'module_prefix': None, 'module_name': 'ParasSudoWrapper', 'spec_version': 202}, {'call_id': 'sudo_queue_downward_xcm', 'call_name': 'sudo_queue_downward_xcm', 'call_args': [{'name': 'id', 'type': 'ParaId'}, {'name': 'xcm', 'type': 'xcm::VersionedXcm'}], 'lookup': '0x1902', 'documentation': ' Send a downward XCM to the given para.\n\n The given parachain should exist and the payload should not exceed the preconfigured size\n `config.max_downward_message_size`.', 'module_id': 'ParasSudoWrapper', 'module_prefix': None, 'module_name': 'ParasSudoWrapper', 'spec_version': 202}, {'call_id': 'sudo_establish_hrmp_channel', 'call_name': 'sudo_establish_hrmp_channel', 'call_args': [{'name': 'sender', 'type': 'ParaId'}, {'name': 'recipient', 'type': 'ParaId'}, {'name': 'max_capacity', 'type': 'u32'}, {'name': 'max_message_size', 'type': 'u32'}], 'lookup': '0x1903', 'documentation': ' Forcefully establish a channel from the sender to the recipient.\n\n This is equivalent to sending an `Hrmp::hrmp_init_open_channel` extrinsic followed by\n `Hrmp::hrmp_accept_open_channel`.', 'module_id': 'ParasSudoWrapper', 'module_prefix': None, 'module_name': 'ParasSudoWrapper', 'spec_version': 202}, {'call_id': 'batch', 'call_name': 'batch', 'call_args': [{'name': 'calls', 'type': 'Vec<Call>'}], 'lookup': '0x1a00', 'documentation': ' Send a batch of dispatch calls.\n\n May be called from any origin.\n\n - `calls`: The calls to be dispatched from the same origin.\n\n If origin is root then call are dispatch without checking origin filter. (This includes\n bypassing `frame_system::Config::BaseCallFilter`).\n\n # <weight>\n - Complexity: O(C) where C is the number of calls to be batched.\n # </weight>\n\n This will return `Ok` in all circumstances. To determine the success of the batch, an\n event is deposited. If a call failed and the batch was interrupted, then the\n `BatchInterrupted` event is deposited, along with the number of successful calls made\n and the error of the failed call. If all were successful, then the `BatchCompleted`\n event is deposited.', 'module_id': 'Utility', 'module_prefix': None, 'module_name': 'Utility', 'spec_version': 202}, {'call_id': 'as_derivative', 'call_name': 'as_derivative', 'call_args': [{'name': 'index', 'type': 'u16'}, {'name': 'call', 'type': 'Box<Call>'}], 'lookup': '0x1a01', 'documentation': ' Send a call through an indexed pseudonym of the sender.\n\n Filter from origin are passed along. The call will be dispatched with an origin which\n use the same filter as the origin of this call.\n\n NOTE: If you need to ensure that any account-based filtering is not honored (i.e.\n because you expect `proxy` to have been used prior in the call stack and you do not want\n the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`\n in the Multisig pallet instead.\n\n NOTE: Prior to version *12, this was called `as_limited_sub`.\n\n The dispatch origin for this call must be _Signed_.', 'module_id': 'Utility', 'module_prefix': None, 'module_name': 'Utility', 'spec_version': 202}, {'call_id': 'batch_all', 'call_name': 'batch_all', 'call_args': [{'name': 'calls', 'type': 'Vec<Call>'}], 'lookup': '0x1a02', 'documentation': ' Send a batch of dispatch calls and atomically execute them.\n The whole transaction will rollback and fail if any of the calls failed.\n\n May be called from any origin.\n\n - `calls`: The calls to be dispatched from the same origin.\n\n If origin is root then call are dispatch without checking origin filter. (This includes\n bypassing `frame_system::Config::BaseCallFilter`).\n\n # <weight>\n - Complexity: O(C) where C is the number of calls to be batched.\n # </weight>', 'module_id': 'Utility', 'module_prefix': None, 'module_name': 'Utility', 'spec_version': 202}, {'call_id': 'propose_spend', 'call_name': 'propose_spend', 'call_args': [{'name': 'value', 'type': 'Compact<BalanceOf<T, I>>'}, {'name': 'beneficiary', 'type': 'LookupSource'}], 'lookup': '0x1b00', 'documentation': ' Put forward a suggestion for spending. A deposit proportional to the value\n is reserved and slashed if the proposal is rejected. It is returned once the\n proposal is awarded.\n\n # <weight>\n - Complexity: O(1)\n - DbReads: `ProposalCount`, `origin account`\n - DbWrites: `ProposalCount`, `Proposals`, `origin account`\n # </weight>', 'module_id': 'Treasury', 'module_prefix': 'Treasury', 'module_name': 'Treasury', 'spec_version': 202}, {'call_id': 'reject_proposal', 'call_name': 'reject_proposal', 'call_args': [{'name': 'proposal_id', 'type': 'Compact<ProposalIndex>'}], 'lookup': '0x1b01', 'documentation': ' Reject a proposed spend. The original deposit will be slashed.\n\n May only be called from `T::RejectOrigin`.\n\n # <weight>\n - Complexity: O(1)\n - DbReads: `Proposals`, `rejected proposer account`\n - DbWrites: `Proposals`, `rejected proposer account`\n # </weight>', 'module_id': 'Treasury', 'module_prefix': 'Treasury', 'module_name': 'Treasury', 'spec_version': 202}, {'call_id': 'approve_proposal', 'call_name': 'approve_proposal', 'call_args': [{'name': 'proposal_id', 'type': 'Compact<ProposalIndex>'}], 'lookup': '0x1b02', 'documentation': ' Approve a proposal. At a later time, the proposal will be allocated to the beneficiary\n and the original deposit will be returned.\n\n May only be called from `T::ApproveOrigin`.\n\n # <weight>\n - Complexity: O(1).\n - DbReads: `Proposals`, `Approvals`\n - DbWrite: `Approvals`\n # </weight>', 'module_id': 'Treasury', 'module_prefix': 'Treasury', 'module_name': 'Treasury', 'spec_version': 202}, {'call_id': 'propose_bounty', 'call_name': 'propose_bounty', 'call_args': [{'name': 'value', 'type': 'Compact<BalanceOf>'}, {'name': 'description', 'type': 'Bytes'}], 'lookup': '0x1c00', 'documentation': ' Propose a new bounty.\n\n The dispatch origin for this call must be _Signed_.\n\n Payment: `TipReportDepositBase` will be reserved from the origin account, as well as\n `DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,\n or slashed when rejected.\n\n - `curator`: The curator account whom will manage this bounty.\n - `fee`: The curator fee.\n - `value`: The total payment amount of this bounty, curator fee included.\n - `description`: The description of this bounty.', 'module_id': 'Bounties', 'module_prefix': 'Treasury', 'module_name': 'Bounties', 'spec_version': 202}, {'call_id': 'approve_bounty', 'call_name': 'approve_bounty', 'call_args': [{'name': 'bounty_id', 'type': 'Compact<BountyIndex>'}], 'lookup': '0x1c01', 'documentation': ' Approve a bounty proposal. At a later time, the bounty will be funded and become active\n and the original deposit will be returned.\n\n May only be called from `T::ApproveOrigin`.\n\n # <weight>\n - O(1).\n # </weight>', 'module_id': 'Bounties', 'module_prefix': 'Treasury', 'module_name': 'Bounties', 'spec_version': 202}, {'call_id': 'propose_curator', 'call_name': 'propose_curator', 'call_args': [{'name': 'bounty_id', 'type': 'Compact<BountyIndex>'}, {'name': 'curator', 'type': 'LookupSource'}, {'name': 'fee', 'type': 'Compact<BalanceOf>'}], 'lookup': '0x1c02', 'documentation': ' Assign a curator to a funded bounty.\n\n May only be called from `T::ApproveOrigin`.\n\n # <weight>\n - O(1).\n # </weight>', 'module_id': 'Bounties', 'module_prefix': 'Treasury', 'module_name': 'Bounties', 'spec_version': 202}, {'call_id': 'unassign_curator', 'call_name': 'unassign_curator', 'call_args': [{'name': 'bounty_id', 'type': 'Compact<BountyIndex>'}], 'lookup': '0x1c03', 'documentation': ' Unassign curator from a bounty.\n\n This function can only be called by the `RejectOrigin` a signed origin.\n\n If this function is called by the `RejectOrigin`, we assume that the curator is malicious\n or inactive. As a result, we will slash the curator when possible.\n\n If the origin is the curator, we take this as a sign they are unable to do their job and\n they willingly give up. We could slash them, but for now we allow them to recover their\n deposit and exit without issue. (We may want to change this if it is abused.)\n\n Finally, the origin can be anyone if and only if the curator is "inactive". This allows\n anyone in the community to call out that a curator is not doing their due diligence, and\n we should pick a new curator. In this case the curator should also be slashed.\n\n # <weight>\n - O(1).\n # </weight>', 'module_id': 'Bounties', 'module_prefix': 'Treasury', 'module_name': 'Bounties', 'spec_version': 202}, {'call_id': 'accept_curator', 'call_name': 'accept_curator', 'call_args': [{'name': 'bounty_id', 'type': 'Compact<BountyIndex>'}], 'lookup': '0x1c04', 'documentation': ' Accept the curator role for a bounty.\n A deposit will be reserved from curator and refund upon successful payout.\n\n May only be called from the curator.\n\n # <weight>\n - O(1).\n # </weight>', 'module_id': 'Bounties', 'module_prefix': 'Treasury', 'module_name': 'Bounties', 'spec_version': 202}, {'call_id': 'award_bounty', 'call_name': 'award_bounty', 'call_args': [{'name': 'bounty_id', 'type': 'Compact<BountyIndex>'}, {'name': 'beneficiary', 'type': 'LookupSource'}], 'lookup': '0x1c05', 'documentation': ' Award bounty to a beneficiary account. The beneficiary will be able to claim the funds after a delay.\n\n The dispatch origin for this call must be the curator of this bounty.\n\n - `bounty_id`: Bounty ID to award.\n - `beneficiary`: The beneficiary account whom will receive the payout.\n\n # <weight>\n - O(1).\n # </weight>', 'module_id': 'Bounties', 'module_prefix': 'Treasury', 'module_name': 'Bounties', 'spec_version': 202}, {'call_id': 'claim_bounty', 'call_name': 'claim_bounty', 'call_args': [{'name': 'bounty_id', 'type': 'Compact<BountyIndex>'}], 'lookup': '0x1c06', 'documentation': ' Claim the payout from an awarded bounty after payout delay.\n\n The dispatch origin for this call must be the beneficiary of this bounty.\n\n - `bounty_id`: Bounty ID to claim.\n\n # <weight>\n - O(1).\n # </weight>', 'module_id': 'Bounties', 'module_prefix': 'Treasury', 'module_name': 'Bounties', 'spec_version': 202}, {'call_id': 'close_bounty', 'call_name': 'close_bounty', 'call_args': [{'name': 'bounty_id', 'type': 'Compact<BountyIndex>'}], 'lookup': '0x1c07', 'documentation': ' Cancel a proposed or active bounty. All the funds will be sent to treasury and\n the curator deposit will be unreserved if possible.\n\n Only `T::RejectOrigin` is able to cancel a bounty.\n\n - `bounty_id`: Bounty ID to cancel.\n\n # <weight>\n - O(1).\n # </weight>', 'module_id': 'Bounties', 'module_prefix': 'Treasury', 'module_name': 'Bounties', 'spec_version': 202}, {'call_id': 'extend_bounty_expiry', 'call_name': 'extend_bounty_expiry', 'call_args': [{'name': 'bounty_id', 'type': 'Compact<BountyIndex>'}, {'name': '_remark', 'type': 'Bytes'}], 'lookup': '0x1c08', 'documentation': ' Extend the expiry time of an active bounty.\n\n The dispatch origin for this call must be the curator of this bounty.\n\n - `bounty_id`: Bounty ID to extend.\n - `remark`: additional information.\n\n # <weight>\n - O(1).\n # </weight>', 'module_id': 'Bounties', 'module_prefix': 'Treasury', 'module_name': 'Bounties', 'spec_version': 202}, {'call_id': 'sudo', 'call_name': 'sudo', 'call_args': [{'name': 'call', 'type': 'Box<Call>'}], 'lookup': '0x1d00', 'documentation': ' Authenticates the sudo key and dispatches a function call with `Root` origin.\n\n The dispatch origin for this call must be _Signed_.\n\n # <weight>\n - O(1).\n - Limited storage reads.\n - One DB write (event).\n - Weight of derivative `call` execution + 10,000.\n # </weight>', 'module_id': 'Sudo', 'module_prefix': 'Sudo', 'module_name': 'Sudo', 'spec_version': 202}, {'call_id': 'sudo_unchecked_weight', 'call_name': 'sudo_unchecked_weight', 'call_args': [{'name': 'call', 'type': 'Box<Call>'}, {'name': '_weight', 'type': 'Weight'}], 'lookup': '0x1d01', 'documentation': ' Authenticates the sudo key and dispatches a function call with `Root` origin.\n This function does not check the weight of the call, and instead allows the\n Sudo user to specify the weight of the call.\n\n The dispatch origin for this call must be _Signed_.\n\n # <weight>\n - O(1).\n - The weight of this call is defined by the caller.\n # </weight>', 'module_id': 'Sudo', 'module_prefix': 'Sudo', 'module_name': 'Sudo', 'spec_version': 202}, {'call_id': 'set_key', 'call_name': 'set_key', 'call_args': [{'name': 'new', 'type': 'LookupSource'}], 'lookup': '0x1d02', 'documentation': ' Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.\n\n The dispatch origin for this call must be _Signed_.\n\n # <weight>\n - O(1).\n - Limited storage reads.\n - One DB change.\n # </weight>', 'module_id': 'Sudo', 'module_prefix': 'Sudo', 'module_name': 'Sudo', 'spec_version': 202}, {'call_id': 'sudo_as', 'call_name': 'sudo_as', 'call_args': [{'name': 'who', 'type': 'LookupSource'}, {'name': 'call', 'type': 'Box<Call>'}], 'lookup': '0x1d03', 'documentation': ' Authenticates the sudo key and dispatches a function call with `Signed` origin from\n a given account.\n\n The dispatch origin for this call must be _Signed_.\n\n # <weight>\n - O(1).\n - Limited storage reads.\n - One DB write (event).\n - Weight of derivative `call` execution + 10,000.\n # </weight>', 'module_id': 'Sudo', 'module_prefix': 'Sudo', 'module_name': 'Sudo', 'spec_version': 202}, {'call_id': 'propose', 'call_name': 'propose', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}, {'name': 'value', 'type': 'Compact<BalanceOf>'}], 'lookup': '0x1e00', 'documentation': ' Propose a sensitive action to be taken.\n\n The dispatch origin of this call must be _Signed_ and the sender must\n have funds to cover the deposit.\n\n - `proposal_hash`: The hash of the proposal preimage.\n - `value`: The amount of deposit (must be at least `MinimumDeposit`).\n\n Emits `Proposed`.\n\n Weight: `O(p)`', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'second', 'call_name': 'second', 'call_args': [{'name': 'proposal', 'type': 'Compact<PropIndex>'}, {'name': 'seconds_upper_bound', 'type': 'Compact<u32>'}], 'lookup': '0x1e01', 'documentation': ' Signals agreement with a particular proposal.\n\n The dispatch origin of this call must be _Signed_ and the sender\n must have funds to cover the deposit, equal to the original deposit.\n\n - `proposal`: The index of the proposal to second.\n - `seconds_upper_bound`: an upper bound on the current number of seconds on this\n   proposal. Extrinsic is weighted according to this value with no refund.\n\n Weight: `O(S)` where S is the number of seconds a proposal already has.', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'vote', 'call_name': 'vote', 'call_args': [{'name': 'ref_index', 'type': 'Compact<ReferendumIndex>'}, {'name': 'vote', 'type': 'AccountVote<BalanceOf>'}], 'lookup': '0x1e02', 'documentation': ' Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;\n otherwise it is a vote to keep the status quo.\n\n The dispatch origin of this call must be _Signed_.\n\n - `ref_index`: The index of the referendum to vote for.\n - `vote`: The vote configuration.\n\n Weight: `O(R)` where R is the number of referendums the voter has voted on.', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'emergency_cancel', 'call_name': 'emergency_cancel', 'call_args': [{'name': 'ref_index', 'type': 'ReferendumIndex'}], 'lookup': '0x1e03', 'documentation': ' Schedule an emergency cancellation of a referendum. Cannot happen twice to the same\n referendum.\n\n The dispatch origin of this call must be `CancellationOrigin`.\n\n -`ref_index`: The index of the referendum to cancel.\n\n Weight: `O(1)`.', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'external_propose', 'call_name': 'external_propose', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}], 'lookup': '0x1e04', 'documentation': ' Schedule a referendum to be tabled once it is legal to schedule an external\n referendum.\n\n The dispatch origin of this call must be `ExternalOrigin`.\n\n - `proposal_hash`: The preimage hash of the proposal.\n\n Weight: `O(V)` with V number of vetoers in the blacklist of proposal.\n   Decoding vec of length V. Charged as maximum', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'external_propose_majority', 'call_name': 'external_propose_majority', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}], 'lookup': '0x1e05', 'documentation': ' Schedule a majority-carries referendum to be tabled next once it is legal to schedule\n an external referendum.\n\n The dispatch of this call must be `ExternalMajorityOrigin`.\n\n - `proposal_hash`: The preimage hash of the proposal.\n\n Unlike `external_propose`, blacklisting has no effect on this and it may replace a\n pre-scheduled `external_propose` call.\n\n Weight: `O(1)`', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'external_propose_default', 'call_name': 'external_propose_default', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}], 'lookup': '0x1e06', 'documentation': ' Schedule a negative-turnout-bias referendum to be tabled next once it is legal to\n schedule an external referendum.\n\n The dispatch of this call must be `ExternalDefaultOrigin`.\n\n - `proposal_hash`: The preimage hash of the proposal.\n\n Unlike `external_propose`, blacklisting has no effect on this and it may replace a\n pre-scheduled `external_propose` call.\n\n Weight: `O(1)`', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'fast_track', 'call_name': 'fast_track', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}, {'name': 'voting_period', 'type': 'BlockNumber'}, {'name': 'delay', 'type': 'BlockNumber'}], 'lookup': '0x1e07', 'documentation': " Schedule the currently externally-proposed majority-carries referendum to be tabled\n immediately. If there is no externally-proposed referendum currently, or if there is one\n but it is not a majority-carries referendum then it fails.\n\n The dispatch of this call must be `FastTrackOrigin`.\n\n - `proposal_hash`: The hash of the current external proposal.\n - `voting_period`: The period that is allowed for voting on this proposal. Increased to\n   `FastTrackVotingPeriod` if too low.\n - `delay`: The number of block after voting has ended in approval and this should be\n   enacted. This doesn't have a minimum amount.\n\n Emits `Started`.\n\n Weight: `O(1)`", 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'veto_external', 'call_name': 'veto_external', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}], 'lookup': '0x1e08', 'documentation': ' Veto and blacklist the external proposal hash.\n\n The dispatch origin of this call must be `VetoOrigin`.\n\n - `proposal_hash`: The preimage hash of the proposal to veto and blacklist.\n\n Emits `Vetoed`.\n\n Weight: `O(V + log(V))` where V is number of `existing vetoers`', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'cancel_referendum', 'call_name': 'cancel_referendum', 'call_args': [{'name': 'ref_index', 'type': 'Compact<ReferendumIndex>'}], 'lookup': '0x1e09', 'documentation': ' Remove a referendum.\n\n The dispatch origin of this call must be _Root_.\n\n - `ref_index`: The index of the referendum to cancel.\n\n # Weight: `O(1)`.', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'cancel_queued', 'call_name': 'cancel_queued', 'call_args': [{'name': 'which', 'type': 'ReferendumIndex'}], 'lookup': '0x1e0a', 'documentation': ' Cancel a proposal queued for enactment.\n\n The dispatch origin of this call must be _Root_.\n\n - `which`: The index of the referendum to cancel.\n\n Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`.', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'delegate', 'call_name': 'delegate', 'call_args': [{'name': 'to', 'type': 'AccountId'}, {'name': 'conviction', 'type': 'Conviction'}, {'name': 'balance', 'type': 'BalanceOf'}], 'lookup': '0x1e0b', 'documentation': " Delegate the voting power (with some given conviction) of the sending account.\n\n The balance delegated is locked for as long as it's delegated, and thereafter for the\n time appropriate for the conviction's lock period.\n\n The dispatch origin of this call must be _Signed_, and the signing account must either:\n   - be delegating already; or\n   - have no voting activity (if there is, then it will need to be removed/consolidated\n     through `reap_vote` or `unvote`).\n\n - `to`: The account whose voting the `target` account's voting power will follow.\n - `conviction`: The conviction that will be attached to the delegated votes. When the\n   account is undelegated, the funds will be locked for the corresponding period.\n - `balance`: The amount of the account's balance to be used in delegating. This must\n   not be more than the account's current balance.\n\n Emits `Delegated`.\n\n Weight: `O(R)` where R is the number of referendums the voter delegating to has\n   voted on. Weight is charged as if maximum votes.", 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'undelegate', 'call_name': 'undelegate', 'call_args': [], 'lookup': '0x1e0c', 'documentation': ' Undelegate the voting power of the sending account.\n\n Tokens may be unlocked following once an amount of time consistent with the lock period\n of the conviction with which the delegation was issued.\n\n The dispatch origin of this call must be _Signed_ and the signing account must be\n currently delegating.\n\n Emits `Undelegated`.\n\n Weight: `O(R)` where R is the number of referendums the voter delegating to has\n   voted on. Weight is charged as if maximum votes.', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'clear_public_proposals', 'call_name': 'clear_public_proposals', 'call_args': [], 'lookup': '0x1e0d', 'documentation': ' Clears all public proposals.\n\n The dispatch origin of this call must be _Root_.\n\n Weight: `O(1)`.', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'note_preimage', 'call_name': 'note_preimage', 'call_args': [{'name': 'encoded_proposal', 'type': 'Bytes'}], 'lookup': '0x1e0e', 'documentation': " Register the preimage for an upcoming proposal. This doesn't require the proposal to be\n in the dispatch queue but does require a deposit, returned once enacted.\n\n The dispatch origin of this call must be _Signed_.\n\n - `encoded_proposal`: The preimage of a proposal.\n\n Emits `PreimageNoted`.\n\n Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit).", 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'note_preimage_operational', 'call_name': 'note_preimage_operational', 'call_args': [{'name': 'encoded_proposal', 'type': 'Bytes'}], 'lookup': '0x1e0f', 'documentation': ' Same as `note_preimage` but origin is `OperationalPreimageOrigin`.', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'note_imminent_preimage', 'call_name': 'note_imminent_preimage', 'call_args': [{'name': 'encoded_proposal', 'type': 'Bytes'}], 'lookup': '0x1e10', 'documentation': ' Register the preimage for an upcoming proposal. This requires the proposal to be\n in the dispatch queue. No deposit is needed. When this call is successful, i.e.\n the preimage has not been uploaded before and matches some imminent proposal,\n no fee is paid.\n\n The dispatch origin of this call must be _Signed_.\n\n - `encoded_proposal`: The preimage of a proposal.\n\n Emits `PreimageNoted`.\n\n Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit).', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'note_imminent_preimage_operational', 'call_name': 'note_imminent_preimage_operational', 'call_args': [{'name': 'encoded_proposal', 'type': 'Bytes'}], 'lookup': '0x1e11', 'documentation': ' Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`.', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'reap_preimage', 'call_name': 'reap_preimage', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}, {'name': 'proposal_len_upper_bound', 'type': 'Compact<u32>'}], 'lookup': '0x1e12', 'documentation': " Remove an expired proposal preimage and collect the deposit.\n\n The dispatch origin of this call must be _Signed_.\n\n - `proposal_hash`: The preimage hash of a proposal.\n - `proposal_length_upper_bound`: an upper bound on length of the proposal.\n   Extrinsic is weighted according to this value with no refund.\n\n This will only work after `VotingPeriod` blocks from the time that the preimage was\n noted, if it's the same account doing it. If it's a different account, then it'll only\n work an additional `EnactmentPeriod` later.\n\n Emits `PreimageReaped`.\n\n Weight: `O(D)` where D is length of proposal.", 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'unlock', 'call_name': 'unlock', 'call_args': [{'name': 'target', 'type': 'AccountId'}], 'lookup': '0x1e13', 'documentation': ' Unlock tokens that have an expired lock.\n\n The dispatch origin of this call must be _Signed_.\n\n - `target`: The account to remove the lock on.\n\n Weight: `O(R)` with R number of vote of target.', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'remove_vote', 'call_name': 'remove_vote', 'call_args': [{'name': 'index', 'type': 'ReferendumIndex'}], 'lookup': '0x1e14', 'documentation': " Remove a vote for a referendum.\n\n If:\n - the referendum was cancelled, or\n - the referendum is ongoing, or\n - the referendum has ended such that\n   - the vote of the account was in opposition to the result; or\n   - there was no conviction to the account's vote; or\n   - the account made a split vote\n ...then the vote is removed cleanly and a following call to `unlock` may result in more\n funds being available.\n\n If, however, the referendum has ended and:\n - it finished corresponding to the vote of the account, and\n - the account made a standard vote with conviction, and\n - the lock period of the conviction is not over\n ...then the lock will be aggregated into the overall account's lock, which may involve\n *overlocking* (where the two locks are combined into a single lock that is the maximum\n of both the amount locked and the time is it locked for).\n\n The dispatch origin of this call must be _Signed_, and the signer must have a vote\n registered for referendum `index`.\n\n - `index`: The index of referendum of the vote to be removed.\n\n Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.\n   Weight is calculated for the maximum number of vote.", 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'remove_other_vote', 'call_name': 'remove_other_vote', 'call_args': [{'name': 'target', 'type': 'AccountId'}, {'name': 'index', 'type': 'ReferendumIndex'}], 'lookup': '0x1e15', 'documentation': ' Remove a vote for a referendum.\n\n If the `target` is equal to the signer, then this function is exactly equivalent to\n `remove_vote`. If not equal to the signer, then the vote must have expired,\n either because the referendum was cancelled, because the voter lost the referendum or\n because the conviction period is over.\n\n The dispatch origin of this call must be _Signed_.\n\n - `target`: The account of the vote to be removed; this account must have voted for\n   referendum `index`.\n - `index`: The index of referendum of the vote to be removed.\n\n Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.\n   Weight is calculated for the maximum number of vote.', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'enact_proposal', 'call_name': 'enact_proposal', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}, {'name': 'index', 'type': 'ReferendumIndex'}], 'lookup': '0x1e16', 'documentation': ' Enact a proposal from a referendum. For now we just make the weight be the maximum.', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'blacklist', 'call_name': 'blacklist', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}, {'name': 'maybe_ref_index', 'type': 'Option<ReferendumIndex>'}], 'lookup': '0x1e17', 'documentation': ' Permanently place a proposal into the blacklist. This prevents it from ever being\n proposed again.\n\n If called on a queued public or external proposal, then this will result in it being\n removed. If the `ref_index` supplied is an active referendum with the proposal hash,\n then it will be cancelled.\n\n The dispatch origin of this call must be `BlacklistOrigin`.\n\n - `proposal_hash`: The proposal hash to blacklist permanently.\n - `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be\n cancelled.\n\n Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a\n   reasonable value).', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'cancel_proposal', 'call_name': 'cancel_proposal', 'call_args': [{'name': 'prop_index', 'type': 'Compact<PropIndex>'}], 'lookup': '0x1e18', 'documentation': ' Remove a proposal.\n\n The dispatch origin of this call must be `CancelProposalOrigin`.\n\n - `prop_index`: The index of the proposal to cancel.\n\n Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`', 'module_id': 'Democracy', 'module_prefix': 'Democracy', 'module_name': 'Democracy', 'spec_version': 202}, {'call_id': 'set_members', 'call_name': 'set_members', 'call_args': [{'name': 'new_members', 'type': 'Vec<AccountId>'}, {'name': 'prime', 'type': 'Option<AccountId>'}, {'name': 'old_count', 'type': 'MemberCount'}], 'lookup': '0x1f00', 'documentation': " Set the collective's membership.\n\n - `new_members`: The new member list. Be nice to the chain and provide it sorted.\n - `prime`: The prime member whose vote sets the default.\n - `old_count`: The upper bound for the previous number of members in storage.\n                Used for weight estimation.\n\n Requires root origin.\n\n NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but\n       the weight estimations rely on it to estimate dispatchable weight.\n\n # <weight>\n ## Weight\n - `O(MP + N)` where:\n   - `M` old-members-count (code- and governance-bounded)\n   - `N` new-members-count (code- and governance-bounded)\n   - `P` proposals-count (code-bounded)\n - DB:\n   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members\n   - 1 storage read (codec `O(P)`) for reading the proposals\n   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal\n   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one\n # </weight>", 'module_id': 'Council', 'module_prefix': 'Instance1Collective', 'module_name': 'Council', 'spec_version': 202}, {'call_id': 'execute', 'call_name': 'execute', 'call_args': [{'name': 'proposal', 'type': 'Box<Proposal>'}, {'name': 'length_bound', 'type': 'Compact<u32>'}], 'lookup': '0x1f01', 'documentation': ' Dispatch a proposal from a member using the `Member` origin.\n\n Origin must be a member of the collective.\n\n # <weight>\n ## Weight\n - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`\n - DB: 1 read (codec `O(M)`) + DB access of `proposal`\n - 1 event\n # </weight>', 'module_id': 'Council', 'module_prefix': 'Instance1Collective', 'module_name': 'Council', 'spec_version': 202}, {'call_id': 'propose', 'call_name': 'propose', 'call_args': [{'name': 'threshold', 'type': 'Compact<MemberCount>'}, {'name': 'proposal', 'type': 'Box<Proposal>'}, {'name': 'length_bound', 'type': 'Compact<u32>'}], 'lookup': '0x1f02', 'documentation': ' Add a new proposal to either be voted on or executed directly.\n\n Requires the sender to be member.\n\n `threshold` determines whether `proposal` is executed directly (`threshold < 2`)\n or put up for voting.\n\n # <weight>\n ## Weight\n - `O(B + M + P1)` or `O(B + M + P2)` where:\n   - `B` is `proposal` size in bytes (length-fee-bounded)\n   - `M` is members-count (code- and governance-bounded)\n   - branching is influenced by `threshold` where:\n     - `P1` is proposal execution complexity (`threshold < 2`)\n     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)\n - DB:\n   - 1 storage read `is_member` (codec `O(M)`)\n   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)\n   - DB accesses influenced by `threshold`:\n     - EITHER storage accesses done by `proposal` (`threshold < 2`)\n     - OR proposal insertion (`threshold <= 2`)\n       - 1 storage mutation `Proposals` (codec `O(P2)`)\n       - 1 storage mutation `ProposalCount` (codec `O(1)`)\n       - 1 storage write `ProposalOf` (codec `O(B)`)\n       - 1 storage write `Voting` (codec `O(M)`)\n   - 1 event\n # </weight>', 'module_id': 'Council', 'module_prefix': 'Instance1Collective', 'module_name': 'Council', 'spec_version': 202}, {'call_id': 'vote', 'call_name': 'vote', 'call_args': [{'name': 'proposal', 'type': 'Hash'}, {'name': 'index', 'type': 'Compact<ProposalIndex>'}, {'name': 'approve', 'type': 'bool'}], 'lookup': '0x1f03', 'documentation': ' Add an aye or nay vote for the sender to the given proposal.\n\n Requires the sender to be a member.\n\n Transaction fees will be waived if the member is voting on any particular proposal\n for the first time and the call is successful. Subsequent vote changes will charge a fee.\n # <weight>\n ## Weight\n - `O(M)` where `M` is members-count (code- and governance-bounded)\n - DB:\n   - 1 storage read `Members` (codec `O(M)`)\n   - 1 storage mutation `Voting` (codec `O(M)`)\n - 1 event\n # </weight>', 'module_id': 'Council', 'module_prefix': 'Instance1Collective', 'module_name': 'Council', 'spec_version': 202}, {'call_id': 'close', 'call_name': 'close', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}, {'name': 'index', 'type': 'Compact<ProposalIndex>'}, {'name': 'proposal_weight_bound', 'type': 'Compact<Weight>'}, {'name': 'length_bound', 'type': 'Compact<u32>'}], 'lookup': '0x1f04', 'documentation': ' Close a vote that is either approved, disapproved or whose voting period has ended.\n\n May be called by any signed account in order to finish voting and close the proposal.\n\n If called before the end of the voting period it will only close the vote if it is\n has enough votes to be approved or disapproved.\n\n If called after the end of the voting period abstentions are counted as rejections\n unless there is a prime member set and the prime member cast an approval.\n\n If the close operation completes successfully with disapproval, the transaction fee will\n be waived. Otherwise execution of the approved operation will be charged to the caller.\n\n + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.\n + `length_bound`: The upper bound for the length of the proposal in storage. Checked via\n                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.\n\n # <weight>\n ## Weight\n - `O(B + M + P1 + P2)` where:\n   - `B` is `proposal` size in bytes (length-fee-bounded)\n   - `M` is members-count (code- and governance-bounded)\n   - `P1` is the complexity of `proposal` preimage.\n   - `P2` is proposal-count (code-bounded)\n - DB:\n  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)\n  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)\n  - any mutations done while executing `proposal` (`P1`)\n - up to 3 events\n # </weight>', 'module_id': 'Council', 'module_prefix': 'Instance1Collective', 'module_name': 'Council', 'spec_version': 202}, {'call_id': 'disapprove_proposal', 'call_name': 'disapprove_proposal', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}], 'lookup': '0x1f05', 'documentation': ' Disapprove a proposal, close, and remove it from the system, regardless of its current state.\n\n Must be called by the Root origin.\n\n Parameters:\n * `proposal_hash`: The hash of the proposal that should be disapproved.\n\n # <weight>\n Complexity: O(P) where P is the number of max proposals\n DB Weight:\n * Reads: Proposals\n * Writes: Voting, Proposals, ProposalOf\n # </weight>', 'module_id': 'Council', 'module_prefix': 'Instance1Collective', 'module_name': 'Council', 'spec_version': 202}, {'call_id': 'set_members', 'call_name': 'set_members', 'call_args': [{'name': 'new_members', 'type': 'Vec<AccountId>'}, {'name': 'prime', 'type': 'Option<AccountId>'}, {'name': 'old_count', 'type': 'MemberCount'}], 'lookup': '0x2000', 'documentation': " Set the collective's membership.\n\n - `new_members`: The new member list. Be nice to the chain and provide it sorted.\n - `prime`: The prime member whose vote sets the default.\n - `old_count`: The upper bound for the previous number of members in storage.\n                Used for weight estimation.\n\n Requires root origin.\n\n NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but\n       the weight estimations rely on it to estimate dispatchable weight.\n\n # <weight>\n ## Weight\n - `O(MP + N)` where:\n   - `M` old-members-count (code- and governance-bounded)\n   - `N` new-members-count (code- and governance-bounded)\n   - `P` proposals-count (code-bounded)\n - DB:\n   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members\n   - 1 storage read (codec `O(P)`) for reading the proposals\n   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal\n   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one\n # </weight>", 'module_id': 'TechnicalCommittee', 'module_prefix': 'Instance2Collective', 'module_name': 'TechnicalCommittee', 'spec_version': 202}, {'call_id': 'execute', 'call_name': 'execute', 'call_args': [{'name': 'proposal', 'type': 'Box<Proposal>'}, {'name': 'length_bound', 'type': 'Compact<u32>'}], 'lookup': '0x2001', 'documentation': ' Dispatch a proposal from a member using the `Member` origin.\n\n Origin must be a member of the collective.\n\n # <weight>\n ## Weight\n - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`\n - DB: 1 read (codec `O(M)`) + DB access of `proposal`\n - 1 event\n # </weight>', 'module_id': 'TechnicalCommittee', 'module_prefix': 'Instance2Collective', 'module_name': 'TechnicalCommittee', 'spec_version': 202}, {'call_id': 'propose', 'call_name': 'propose', 'call_args': [{'name': 'threshold', 'type': 'Compact<MemberCount>'}, {'name': 'proposal', 'type': 'Box<Proposal>'}, {'name': 'length_bound', 'type': 'Compact<u32>'}], 'lookup': '0x2002', 'documentation': ' Add a new proposal to either be voted on or executed directly.\n\n Requires the sender to be member.\n\n `threshold` determines whether `proposal` is executed directly (`threshold < 2`)\n or put up for voting.\n\n # <weight>\n ## Weight\n - `O(B + M + P1)` or `O(B + M + P2)` where:\n   - `B` is `proposal` size in bytes (length-fee-bounded)\n   - `M` is members-count (code- and governance-bounded)\n   - branching is influenced by `threshold` where:\n     - `P1` is proposal execution complexity (`threshold < 2`)\n     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)\n - DB:\n   - 1 storage read `is_member` (codec `O(M)`)\n   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)\n   - DB accesses influenced by `threshold`:\n     - EITHER storage accesses done by `proposal` (`threshold < 2`)\n     - OR proposal insertion (`threshold <= 2`)\n       - 1 storage mutation `Proposals` (codec `O(P2)`)\n       - 1 storage mutation `ProposalCount` (codec `O(1)`)\n       - 1 storage write `ProposalOf` (codec `O(B)`)\n       - 1 storage write `Voting` (codec `O(M)`)\n   - 1 event\n # </weight>', 'module_id': 'TechnicalCommittee', 'module_prefix': 'Instance2Collective', 'module_name': 'TechnicalCommittee', 'spec_version': 202}, {'call_id': 'vote', 'call_name': 'vote', 'call_args': [{'name': 'proposal', 'type': 'Hash'}, {'name': 'index', 'type': 'Compact<ProposalIndex>'}, {'name': 'approve', 'type': 'bool'}], 'lookup': '0x2003', 'documentation': ' Add an aye or nay vote for the sender to the given proposal.\n\n Requires the sender to be a member.\n\n Transaction fees will be waived if the member is voting on any particular proposal\n for the first time and the call is successful. Subsequent vote changes will charge a fee.\n # <weight>\n ## Weight\n - `O(M)` where `M` is members-count (code- and governance-bounded)\n - DB:\n   - 1 storage read `Members` (codec `O(M)`)\n   - 1 storage mutation `Voting` (codec `O(M)`)\n - 1 event\n # </weight>', 'module_id': 'TechnicalCommittee', 'module_prefix': 'Instance2Collective', 'module_name': 'TechnicalCommittee', 'spec_version': 202}, {'call_id': 'close', 'call_name': 'close', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}, {'name': 'index', 'type': 'Compact<ProposalIndex>'}, {'name': 'proposal_weight_bound', 'type': 'Compact<Weight>'}, {'name': 'length_bound', 'type': 'Compact<u32>'}], 'lookup': '0x2004', 'documentation': ' Close a vote that is either approved, disapproved or whose voting period has ended.\n\n May be called by any signed account in order to finish voting and close the proposal.\n\n If called before the end of the voting period it will only close the vote if it is\n has enough votes to be approved or disapproved.\n\n If called after the end of the voting period abstentions are counted as rejections\n unless there is a prime member set and the prime member cast an approval.\n\n If the close operation completes successfully with disapproval, the transaction fee will\n be waived. Otherwise execution of the approved operation will be charged to the caller.\n\n + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.\n + `length_bound`: The upper bound for the length of the proposal in storage. Checked via\n                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.\n\n # <weight>\n ## Weight\n - `O(B + M + P1 + P2)` where:\n   - `B` is `proposal` size in bytes (length-fee-bounded)\n   - `M` is members-count (code- and governance-bounded)\n   - `P1` is the complexity of `proposal` preimage.\n   - `P2` is proposal-count (code-bounded)\n - DB:\n  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)\n  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)\n  - any mutations done while executing `proposal` (`P1`)\n - up to 3 events\n # </weight>', 'module_id': 'TechnicalCommittee', 'module_prefix': 'Instance2Collective', 'module_name': 'TechnicalCommittee', 'spec_version': 202}, {'call_id': 'disapprove_proposal', 'call_name': 'disapprove_proposal', 'call_args': [{'name': 'proposal_hash', 'type': 'Hash'}], 'lookup': '0x2005', 'documentation': ' Disapprove a proposal, close, and remove it from the system, regardless of its current state.\n\n Must be called by the Root origin.\n\n Parameters:\n * `proposal_hash`: The hash of the proposal that should be disapproved.\n\n # <weight>\n Complexity: O(P) where P is the number of max proposals\n DB Weight:\n * Reads: Proposals\n * Writes: Voting, Proposals, ProposalOf\n # </weight>', 'module_id': 'TechnicalCommittee', 'module_prefix': 'Instance2Collective', 'module_name': 'TechnicalCommittee', 'spec_version': 202}, {'call_id': 'propose_parachain', 'call_name': 'propose_parachain', 'call_args': [{'name': 'para_id', 'type': 'ParaId'}, {'name': 'name', 'type': 'Bytes'}, {'name': 'validation_code', 'type': 'ValidationCode'}, {'name': 'genesis_head', 'type': 'HeadData'}, {'name': 'validators', 'type': 'Vec<ValidatorId>'}, {'name': 'balance', 'type': 'BalanceOf'}], 'lookup': '0x2100', 'documentation': ' Propose a new parachain\n\n This requires:\n - `para_id`: The id of the parachain.\n - `name`: The name of the parachain.\n - `validation_function`: The wasm runtime of the parachain.\n - `initial_head_state`: The genesis state of the parachain.\n - `validators`: Validators that will validate for the relay chain, needs to be at least one.\n - `balance`: The initial balance of the parachain on the relay chain.\n\n It will reserve a deposit from the sender account over the lifetime of the chain.', 'module_id': 'ProposeParachain', 'module_prefix': 'ParachainProposer', 'module_name': 'ProposeParachain', 'spec_version': 202}, {'call_id': 'approve_proposal', 'call_name': 'approve_proposal', 'call_args': [{'name': 'para_id', 'type': 'ParaId'}], 'lookup': '0x2101', 'documentation': ' Approve a parachain proposal.', 'module_id': 'ProposeParachain', 'module_prefix': 'ParachainProposer', 'module_name': 'ProposeParachain', 'spec_version': 202}, {'call_id': 'cancel_proposal', 'call_name': 'cancel_proposal', 'call_args': [{'name': 'para_id', 'type': 'ParaId'}], 'lookup': '0x2102', 'documentation': ' Cancel a parachain proposal.\n\n This also unreserves the deposit.', 'module_id': 'ProposeParachain', 'module_prefix': 'ParachainProposer', 'module_name': 'ProposeParachain', 'spec_version': 202}, {'call_id': 'deregister_parachain', 'call_name': 'deregister_parachain', 'call_args': [{'name': 'para_id', 'type': 'ParaId'}], 'lookup': '0x2103', 'documentation': ' Deregister a parachain that was already successfully registered in the relay chain.', 'module_id': 'ProposeParachain', 'module_prefix': 'ParachainProposer', 'module_name': 'ProposeParachain', 'spec_version': 202}, {'call_id': 'register_validators', 'call_name': 'register_validators', 'call_args': [{'name': 'validators', 'type': 'Vec<ValidatorId>'}], 'lookup': '0x2104', 'documentation': ' Add new validators to the set.', 'module_id': 'ProposeParachain', 'module_prefix': 'ParachainProposer', 'module_name': 'ProposeParachain', 'spec_version': 202}]